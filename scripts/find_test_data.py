from neo4j.v1 import GraphDatabase, basic_auth
import random

driver = GraphDatabase.driver("bolt://192.38.56.57:10001", auth=basic_auth("neo4j", "12345"))

def getAllPositiveTestDataNodes():
    session = driver.session()
    res = session.run("match (a:Page)-[r:clickStream]->(b:Page) where exists(a.featured) AND r.testData = True return a.title,b.title")
    arr = []
    for x in res:
        source = x['a.title']
        target = x['b.title']
        arr.append((source, target))
    session.close()
    return arr


with open("test_data.csv", "w") as test_data_out:
    test_data_positive_nodes = getAllPositiveTestDataNodes()
    print("Got positive nodes")
    for source, target in test_data_positive_nodes:
        test_data_out.write("{} {} 1\n".format(source, target))

    # negatives
    # get the negatives from the negatives file that is generated by ngram technique
    # from featured -> all other possible
    # there is no concern that the testData edges are included, as this is negatives
    with open("negatives", "r") as negatives_file:
        negatives = []
        for line in negatives_file:
            splitted = line.split()
            source = splitted[0]
            target = splitted[1]
            negatives.append((source, target))
        
        # shuffle the negatives list
        random.shuffle(negatives)

        # we only need as many negatives as there are positives
        negatives = negatives[:len(test_data_positive_nodes)]
        # write the negatives to the test_data file
        for source, target in negatives:
            test_data_out.write("{} {} 0\n".format(source, target))